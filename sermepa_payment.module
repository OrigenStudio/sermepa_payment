<?php

// Load the Sermepa Payment statuses.
module_load_include('inc', 'sermepa_payment', 'inc/sermepa_payment.statuses');


/**
 * Implements hook_payment_method_controller_info().
 */
function sermepa_payment_payment_method_controller_info() {
  return array('SermepaPaymentMethodController');
}


/**
 * Implements hook_menu().
 */
function sermepa_payment_menu() {
  return array(
    'sermepa/callback/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Go to payment server',
      'page callback'   => 'sermepa_payment_callback',
      'page arguments'  => array(2),
      'access callback' => 'sermepa_payment_access_callback',
      'access arguments'=> array(2),
      'type'            => MENU_CALLBACK,
    ),
    'sermepa/redirect/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Go to payment server',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('sermepa_payment_form_redirect', 2),
      'access callback' => true,
      'type'            => MENU_CALLBACK,
    ),
    'sermepa/return/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Payment finished',
      'page callback'   => 'sermepa_payment_return',
      'page arguments'  => array(2),
      'access callback' => true,
    ),
    'sermepa/failed/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Payment failed',
      'page callback'   => 'sermepa_payment_failed',
      'page arguments'  => array(2),
      'access callback' => true,
    ),
  );
}


function sermepa_payment_callback(Payment $payment) {
  // when using the HTTP notification system feedback is mandatory, so force
  // the response handling even if it was not received
  SermepaPaymentMethodController::handleResponse($payment, TRUE);
  entity_save('payment', $payment);
}


function sermepa_payment_access_callback(Payment $payment) {
  $sermepa = SermepaPaymentMethodController::createGateway($payment);
  return (bool) $sermepa->getFeedback();
}


function sermepa_payment_return(Payment $payment) {
  watchdog('sermepa_payment', "Transaction for payment {$payment->pid} was authorized.");
  sermepa_payment_ok_ko_callback($payment);
}

function sermepa_payment_failed(Payment $payment) {
  watchdog('sermepa_payment', "Transaction for payment {$payment->pid} was NOT authorized.");
  sermepa_payment_ok_ko_callback($payment);
}

function sermepa_payment_ok_ko_callback(Payment $payment) {
  // if the TPV is configured for not sending any notification the response
  // is included in the OK/KO urls, so try to handle it only if it is indeed
  // received
  SermepaPaymentMethodController::handleResponse($payment);
  $payment->finish();
}

function sermepa_payment_form_redirect(array $form, array &$form_state, Payment $payment) {
  $form = new SermepaPaymentForm($payment);
  return $form->submit('sermepa-payment-form-redirect');
}


/**
 * Form build callback: implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 */
function sermepa_payment_method_configuration(array $form, array &$form_state) {
  $method = $form_state['payment_method'];
  $new_values = $method->controller_data;
  $default_values = $method->controller->controller_data_defaults;
  $values = array_merge($default_values, $new_values);

  $form = new SermepaSettingsForm();
  return $form->create($values);
}


/**
 * Implements form validate callback for sermepa_payment_method_configuration().
 */
function sermepa_payment_method_configuration_validate(array $form, array &$form_state) {
  $values = $form_state['input']['controller_form'];
  $method = $form_state['payment_method'];

  $form = new SermepaSettingsForm();
  $form->validate($method, $values);
}



/**
 * Implements hook_entity_load().
 */
function sermepa_payment_entity_load($entities, $type) {
  if ($type == 'payment_method') {
    SermepaEntityCRUD::load($entities);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sermepa_payment_payment_method_insert(PaymentMethod $method) {
  if ($method->controller->name == 'SermepaPaymentMethodController') {
    SermepaEntityCRUD::insert($method);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sermepa_payment_payment_method_update(PaymentMethod $method) {
  if ($method->controller->name == 'SermepaPaymentMethodController') {
    SermepaEntityCRUD::update($method);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sermepa_payment_payment_method_delete(PaymentMethod $method) {
  if ($method->controller->name == 'SermepaPaymentMethodController') {
    SermepaEntityCRUD::delete($method);
  }
}

/**
 * Implements hook_libraries_info().
 */
function sermepa_payment_libraries_info() {
  return array(
    'sermepa' => array(
      'name' => 'Sermepa (Redsys)',
      'vendor url' => 'https://github.com/CommerceRedsys/sermepa',
      'download url' => 'https://github.com/CommerceRedsys/sermepa',
      'version arguments' => array(
        'file' => 'CHANGELOG.md',
        'pattern' => '/Sermepa - v([0-9a-zA-Z\.-]+)/',
      ),
      'files' => array(
        'php' => array(
          'src/SermepaInterface.php',
          'src/SermepaException.php',
          'src/Sermepa.php',
        ),
      ),
    ),
  );
}
